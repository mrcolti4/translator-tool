name: tests

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: 'mongo:7.0'
        env:
          MONGODB_INITDB_ROOT_USERNAME: ${{ vars.MONGODB_USERNAME || '' }}
          MONGODB_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD || '' }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo \"try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27017'}]}) }\" | mongosh --port 27017 --quiet"
          --health-interval 5s
          --health-timeout 30s
          --health-start-period 0s
          --health-retries 30
          mongo:7.0 --replSet rs0 --bind_ip_all --port 27017
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug
          extensions: mongodb

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Configure MongoDB
        run: |
          echo "DB_CONNECTION=mongodb" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=27017" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "MONGODB_URI=mongodb://127.0.0.1:27017/testing?replicaSet=rs0" >> .env

      - name: Wait for MongoDB Replica Set
        run: |
          echo "Waiting for MongoDB replica set to initialize..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if mongosh --host 127.0.0.1:27017 --eval "rs.status().ok" --quiet 2>/dev/null | grep -q "1"; then
              echo "MongoDB replica set is ready!"
              break
            fi
            echo "Still waiting for replica set... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout-2))
          done
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for MongoDB replica set"
            exit 1
          fi

      - name: Tests
        run: ./vendor/bin/phpunit
